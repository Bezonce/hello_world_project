#      # Replace $PROJECT_ID with your project ID
#      PROJECT_ID: "hello-world-flask-390916"
#      IMAGE_NAME: "gcr.io/hello-world-flask-390916/app"
#      AR_REGION:
#      GAR_REPO_NAME:
#
#      - name: Authenticate to Google Cloud
#        uses: google-github-actions/auth@v0
#        with:
#          # Replace with your Workload Identity Provider Location
#          workload_identity_provider: 'projects/65253733312/locations/global/workloadIdentityPools/gh-pool/providers/gh-provider'
#          # Replace with your GitHub Service Account
#          service_account: 'github-actions-service-account@hello-world-flask-390916.iam.gserviceaccount.com'
on:
  push:
    branches:
      - Dockerisation

env:
  PROJECT_ID: hello-world-flask-390916
  LOCATION: europe-central2
  REPO_NAME: hello-world-flask-390916/hello-world-flask
  SERVICE_ACC: github-actions-service-account@hello-world-flask-390916.iam.gserviceaccount.com

jobs:
  run-and-test:
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest

    steps:
    - uses: 'actions/checkout@v3'

     # Configure Workload Identity Federation via a credentials file.
     - id: 'auth'
       name: 'Authenticate to Google Cloud'
       uses: 'google-github-actions/auth@v1'
       with:
         workload_identity_provider: 'projects/65253733312/locations/global/workloadIdentityPools/gh-pool/providers/gh-provider'
         service_account: '${{env.SERVICE_ACC}}'

          # Install gcloud, `setup-gcloud` automatically picks up authentication from `auth`.
    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'

    # Now you can run gcloud commands authenticated as the impersonated service account.
    - id: 'gcloud'
      name: 'gcloud'
      run: |-
        gcloud secrets versions access "latest" --secret "my-secret"

    - name: 'Use gcloud CLI'
      run: 'gcloud iam service-accounts describe ${{env.SERVICE_ACC}}'